// 模块 'vscode' 包含VS Code的扩展API
// 导入模块并使用别名vscode在代码中引用
import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import AdmZip from 'adm-zip';

// 当扩展被激活时会调用此方法
// 扩展在第一次执行命令时被激活
export function activate(context: vscode.ExtensionContext) {

	// 使用控制台输出诊断信息(console.log)和错误信息(console.error)
	// 这行代码只在扩展被激活时执行一次
	console.log('恭喜，您的扩展 "FastAPI Helper" 现在已激活！');

	// 命令已在package.json文件中定义
	// 现在通过registerCommand提供命令的实现
	// commandId参数必须与package.json中的command字段匹配

	// 注册build fastapi-helper命令
	const buildFastapiCommand = vscode.commands.registerCommand('fastapi-helper.buildFastapiHelper', (uri: vscode.Uri) => {
		// 获取当前工作区文件夹
		// 直接使用工作区根目录
		let workspaceFolder: string | undefined;
		if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {
			workspaceFolder = vscode.workspace.workspaceFolders[0].uri.fsPath;
			console.log(`工作区根目录: ${workspaceFolder}`);
		} else {
			vscode.window.showErrorMessage('未找到工作区文件夹。请先在VS Code中打开一个文件夹。');
			return;
		}

		// 获取fastapi.zip文件的路径
		const zipPath = path.join(context.extensionPath, 'assets', 'fastapi.zip');

		try {
			// 检查zip文件是否存在
			if (!fs.existsSync(zipPath)) {
				vscode.window.showErrorMessage(`在${zipPath}未找到fastapi.zip文件`);
				return;
			}

			// 创建一个新的终端
			const terminal = vscode.window.createTerminal({
				name: 'FastAPI Project Setup',
				cwd: workspaceFolder
			});

			// 显示终端
			terminal.show();

			// 先执行poetry init命令，使用--no-interaction参数避免交互式提示

			vscode.window.showInformationMessage('[1/4] 正在执行第一步：初始化Poetry项目...');
			terminal.sendText('poetry init --no-interaction', true);

			setTimeout(() => {
				// 第二步：解压FastAPI项目模板
				vscode.window.showInformationMessage('[2/4] 正在执行第二步：解压FastAPI项目模板...');
				try {
					// 将zip文件解压到工作区文件夹
					const zip = new AdmZip(zipPath);
					zip.extractAllTo(workspaceFolder, true);
				} catch (error) {
					console.error('解压FastAPI项目模板时出错:', error);
					vscode.window.showErrorMessage(`解压FastAPI项目模板失败: ${error instanceof Error ? error.message : '未知错误'}`);
				}

				setTimeout(() => {
					// 第三步：让用户选择是否更换清华源
					vscode.window.showInformationMessage('[3/4] 正在准备第三步：配置PyPI源...');
					vscode.window.showQuickPick(['是', '否'], {
						placeHolder: '是否使用清华PyPI源？(推荐中国大陆用户选择是)',
						canPickMany: false
					}).then((useTsinghua) => {
						if (useTsinghua === '是') {
							terminal.sendText('poetry source add tsinghua https://pypi.tuna.tsinghua.edu.cn/simple/', true);
							vscode.window.showInformationMessage('正在添加清华PyPI源...');
						} else {
							vscode.window.showInformationMessage('将使用默认PyPI源...');
						}
					});

					setTimeout(() => {
						// 第四步：安装依赖
						vscode.window.showInformationMessage('[4/4] 正在执行第四步：安装依赖...');
						terminal.sendText('poetry add fastapi[standard] sqlmodel alembic psycopg2-binary asyncpg pydantic_settings', true);
						vscode.window.showInformationMessage(`FastAPI项目已成功初始化：${workspaceFolder}`);
					}, 2000); // 第四步：等待配置源完成后安装依赖	
				}, 2000); // 第三步：等待解压完成后配置源

			}, 2000); //第二步：解压FastAPI项目模板
		} catch (error) {
			console.error('构建fastapi-helper时出错:', error);
			vscode.window.showErrorMessage(`构建fastapi-helper失败: ${error instanceof Error ? error.message : '未知错误'}`);
		}
	});

	context.subscriptions.push(buildFastapiCommand);
}

// 当扩展被停用时会调用此方法
export function deactivate() { }
